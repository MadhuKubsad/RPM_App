/*
 * RPM Mobile
 * RPM Mobile
 *
 * The version of the OpenAPI document: Phase 1
 * Contact: karthikchiru@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ChangeTracker;
import org.openapitools.client.model.DatabaseFacade;
import org.openapitools.client.model.DbContextId;
import java.io.Serializable;

/**
 * DbContext
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-27T19:18:22.480284200+05:30[Asia/Calcutta]")
public class DbContext implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private DatabaseFacade database;

  public static final String SERIALIZED_NAME_CHANGE_TRACKER = "changeTracker";
  @SerializedName(SERIALIZED_NAME_CHANGE_TRACKER)
  private ChangeTracker changeTracker;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private Object model;

  public static final String SERIALIZED_NAME_CONTEXT_ID = "contextId";
  @SerializedName(SERIALIZED_NAME_CONTEXT_ID)
  private DbContextId contextId;


  public DbContext database(DatabaseFacade database) {
    
    this.database = database;
    return this;
  }

   /**
   * Get database
   * @return database
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DatabaseFacade getDatabase() {
    return database;
  }


  public void setDatabase(DatabaseFacade database) {
    this.database = database;
  }


  public DbContext changeTracker(ChangeTracker changeTracker) {
    
    this.changeTracker = changeTracker;
    return this;
  }

   /**
   * Get changeTracker
   * @return changeTracker
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ChangeTracker getChangeTracker() {
    return changeTracker;
  }


  public void setChangeTracker(ChangeTracker changeTracker) {
    this.changeTracker = changeTracker;
  }


  public DbContext model(Object model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getModel() {
    return model;
  }


  public void setModel(Object model) {
    this.model = model;
  }


  public DbContext contextId(DbContextId contextId) {
    
    this.contextId = contextId;
    return this;
  }

   /**
   * Get contextId
   * @return contextId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DbContextId getContextId() {
    return contextId;
  }


  public void setContextId(DbContextId contextId) {
    this.contextId = contextId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DbContext dbContext = (DbContext) o;
    return Objects.equals(this.database, dbContext.database) &&
        Objects.equals(this.changeTracker, dbContext.changeTracker) &&
        Objects.equals(this.model, dbContext.model) &&
        Objects.equals(this.contextId, dbContext.contextId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(database, changeTracker, model, contextId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DbContext {\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    changeTracker: ").append(toIndentedString(changeTracker)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    contextId: ").append(toIndentedString(contextId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

